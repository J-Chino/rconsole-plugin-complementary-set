import PQueue from 'p-queue';
import fs from "fs";
import puppeteer from "../../../lib/puppeteer/puppeteer.js";

const queue = new PQueue({ concurrency: 20 });

// TODO ËøôÈáåÈúÄË¶Å‰øÆÊîπ‰Ω†ÁöÑQQÂè∑
const masterId = "";

// ‰ºöÂä®ÊÄÅËé∑Âèñ
let masterName = "";
// true-ÂøôÁ¢å false-ÈöèÊó∂ÊâæÊàë
let masterStatus = true;
let todoList = {}

export class Secretary extends plugin {
    constructor() {
        super({
            name: "Â∞èÁßò‰π¶",
            dsc: "ËÆ©Êú∫Âô®‰∫∫ÊäµÊå°atÔºåÁÑ∂ÂêéÂà∂‰ΩúÊàê TODO ÂêéÁª≠Áªü‰∏ÄÂ§ÑÁêÜ",
            event: "message",
            priority: 9999,
            rule: [
                {
                    reg: "^(?!.*(Â∞èÁßò‰π¶ÂàáÊç¢Áä∂ÊÄÅ|Â∞èÁßò‰π¶TODO|Â∞èÁßò‰π¶cls|Â∞èÁßò‰π¶ÊàëË¶Å)).+$",
                    fnc: "withstand",
                },
                {
                    reg: "^Â∞èÁßò‰π¶ÂàáÊç¢Áä∂ÊÄÅ$",
                    fnc: "switchStatus",
                    permission: "master"
                },
                {
                    reg: "^Â∞èÁßò‰π¶TODO$",
                    fnc: "todoList",
                },
                {
                    reg: "^Â∞èÁßò‰π¶cls$",
                    fnc: "todoCls",
                },
                {
                    reg: "^Â∞èÁßò‰π¶ÊàëË¶Å",
                    fnc: "getSpecialTitle",
                }
            ]
        })
    }

    async withstand(e) {
        queue.add(async () => {
            if (e.at !== masterId) {
                return;
            }
            if (masterName === "") {
                const friends = await e.bot.sendApi("get_friend_list");
                masterName = friends.find(friend => {
                    return friend.uin === masterId;
                }).nickname;
                logger.info("[Â∞èÁßò‰π¶] ÊâæÂà∞‰∏ª‰∫∫ÁöÑÊòµÁß∞ÔºåÂ∑≤ÁªèËÆæÁΩÆÂÆåÊàêÔºÅ");
            }
            // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÈùôÈü≥at
            if (masterStatus === true) {
                await e.bot.sendApi("delete_msg", {
                    message_id: e.message_seq || e.message_id
                });
                e.reply(`üëã HiÔºåËøôÈáåÊòØ${ masterName }ÁöÑÂ∞èÁßò‰π¶\n\nüë®‚Äçüíª ${ masterName }Ê≠£Âú®ÂøôÁ¢åÂì¶~~ÔºÅ\n\nÂøôÂÆåÂ∞±‰ºöÂõûÂ§ç‰Ω†‰∫ÜÂìü~ÔºÅü§üüòò`, true);
            }
            const { user_id, nickname, card } = e.sender;
            const groupId = e.group_id;
            const message = e.msg;
            if (!todoList[groupId]) {
                todoList[groupId] = {};
            }
            if (!Array.isArray(todoList[groupId][user_id])) {
                todoList[groupId][user_id] = [];
            }
            logger.info(todoList);
            todoList[groupId][user_id].push(`${ card || nickname }Ôºö${ message || '' }`);
            logger.info(`[Â∞èÁßò‰π¶] ËÆ∞ÂΩï${user_id}Âà∞ TODO ÂÆåÊàê`);
            return true;
        })
    }

    async switchStatus(e) {
        masterStatus = !masterStatus;
        logger.info(masterStatus);
        e.reply(`Áä∂ÊÄÅÂ∑≤ÁªèÂàáÊç¢‰∏∫Ôºö${ masterStatus === true ? "ÂøôÁ¢å" : "ÈöèÊó∂ÊâæÊàë" }`);
    }

    async todoList(e) {
        const groupId = e.group_id;
        const curGroupTodoList = todoList[groupId] = todoList[groupId] || {};
        const finalHTML = renderHTML(curGroupTodoList);
        // ÊâìÂºÄ‰∏Ä‰∏™Êñ∞ÁöÑÈ°µÈù¢
        const browser = await puppeteer.browserInit();
        const page = await browser.newPage();
        await page.setViewport({
            width: 1280,
            height: 720,
            deviceScaleFactor: 10, // Ê†πÊçÆÊòæÁ§∫Âô®ÁöÑÂàÜËæ®ÁéáË∞ÉÊï¥ÊØî‰æãÔºå2 ÊòØÂ∏∏ËßÅÁöÑ Retina ÊòæÁ§∫ÊØî‰æã
        });
        // ËÆæÁΩÆÈ°µÈù¢ÂÜÖÂÆπ‰∏∫ÂåÖÂê´ Base64 ÂõæÁâáÁöÑ HTML
        await page.setContent(finalHTML, {
            waitUntil: "networkidle0",
        });
        // Áõ¥Êé•Êà™ÂõæËØ•ÂÖÉÁ¥†
        await page.screenshot({
            path: "./todo.png",
            type: "jpeg",
            fullPage: true,
            omitBackground: false,
            quality: 50,
        });
        await e.reply(segment.image(fs.readFileSync("./todo.png")));
    }

    async todoCls(e) {
        todoList = {};
        e.reply("Â∑≤Ê∏ÖÈô§ÊâÄÊúâ TODO");
        return true;
    }

    async getSpecialTitle(e) {
        logger.info(e);
        const title = e.msg.replace(/^Â∞èÁßò‰π¶ÊàëË¶Å/, "").trim();
        await e.bot.sendApi("set_group_special_title", {
            group_id: e.group_id,
            user_id: e.user_id,
            special_title: title,
        });
        e.reply(`Â∑≤‰∏∫‰Ω†ËÆæÁΩÆ‰∫ÜÁæ§Ëç£Ë™âÔºö${ title }`, true);
    }
}

const renderHTML = (curGroupTodoList) => {
    return `
    <!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Áæ§ÂèãÈúÄÊ±Ç Todo List</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f0f2f5;
            color: #333;
        }
        h1 {
            text-align: center;
            color: #1a73e8;
            font-size: 2.5em;
            margin-bottom: 30px;
        }
        .todo-list {
            list-style-type: none;
            padding: 0;
        }
        .todo-item {
            display: flex;
            background-color: #ffffff;
            border: 1px solid #e1e4e8;
            margin-bottom: 15px;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .todo-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }
        .user-info {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-right: 20px;
            width: 120px;
        }
        .user-info img {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            margin-bottom: 10px;
            border: 3px solid #1a73e8;
            transition: all 0.3s ease;
        }
        .todo-item:hover .user-info img {
            transform: scale(1.05);
        }
        .user-details {
            text-align: center;
            font-size: 12px;
            color: #666;
        }
        .user-details div {
            margin-bottom: 3px;
        }
        .todo-content {
            flex-grow: 1;
            display: flex;
            align-items: center;
            font-size: 16px;
            line-height: 1.5;
            color: #24292e;
        }
        @media (max-width: 600px) {
            .todo-item {
                flex-direction: column;
                align-items: center;
            }
            .user-info {
                margin-right: 0;
                margin-bottom: 15px;
            }
            .todo-content {
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <ul class="todo-list">
        ${ Object.keys(curGroupTodoList).map(key => {
            return `
            <li class="todo-item">
                <div class="user-info">
                    <img src="http://q1.qlogo.cn/g?b=qq&nk=${key}&s=100" alt="Áî®Êà∑Â§¥ÂÉè">
                    <div class="user-details">
                        <div>ID: ${key}</div>
                    </div>
                </div>
                <div class="todo-content">
                    ${curGroupTodoList[key]}
                </div>
            </li>
            `
        })}
    </ul>
</body>
</html>
    `
}
